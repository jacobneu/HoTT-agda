{-# OPTIONS --without-K #-}

module example-divmod where 

import 01-simpleTT 
open 01-simpleTT public

{- Library  -}
data ‚Ñï : Type lzero where
  zero : ‚Ñï
  suc : ‚Ñï ‚Üí ‚Ñï
{-# BUILTIN NATURAL ‚Ñï #-}
infixl 6 _+_ 
_+_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
zero + n = n
suc m + n = suc (m + n)
infixl 7 _*_ 
_*_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
zero * n = zero
suc m * n = n + m * n
_-_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï 
0 - _ = 0
m - 0 = m 
(suc m) - (suc n) = m - n 
infix 4 _,_
record _√ó_ (A B : Type ‚Ñì) : Type ‚Ñì where
  constructor _,_
  field
    proj‚ÇÅ : A
    proj‚ÇÇ : B
open _√ó_ public


_<‚ÇÇ_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùüö
_ <‚ÇÇ 0 = off 
0 <‚ÇÇ (suc n) = on
(suc m) <‚ÇÇ (suc n) = m <‚ÇÇ n 

incrementLeft : ‚Ñï √ó ‚Ñï ‚Üí ‚Ñï √ó ‚Ñï
incrementLeft (q , r) = (q + 1 , r)

{-# TERMINATING #-}
-- d ‚â† 0
divmod : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï √ó ‚Ñï 
divmod n d = if n <‚ÇÇ d 
             then (0 , n) 
             else (incrementLeft (divmod (n - d) d))

undivmod : ‚Ñï ‚Üí ‚Ñï √ó ‚Ñï ‚Üí ‚Ñï 
undivmod d (q , r) = q * d + r

